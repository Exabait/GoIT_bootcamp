'use strict';
/*
 * –§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π –≤–∏—Ä–∞–∑ —Ç–∞ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó.
 * –ü–∞—Ä–∞–º–µ—Ç—Ä–∏, –∞—Ä–≥—É–º–µ–Ω—Ç–∏, –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è.
 */

// function –Ω–∞–∑–≤–∞_—Ñ—É–Ω–∫—Ü—ñ—ó(–ø–∞—Ä–∞–º–µ—Ç—Ä_1, –ø–∞—Ä–∞–º–µ—Ç—Ä_2...) {
// —Ç—ñ–ª–æ —Ñ—É–Ω–∫—Ü—ñ—ó
// }

// showMessage('Oleksii');
//
// function showMessage(userFirstName, userLastName = '') {
//   const message = `Hello ${userFirstName} ${userLastName}`;
//
//   console.log(message);
// }

// showMessage('Oleksii');
//
// showMessage('Craig', 'Morris');

// const showMessage = function (userFirstName, userLastName = '') {
//   const message = `Hello ${userFirstName} ${userLastName}`;
//
//   console.log(message);
// };

// showMessage('Oleksii');
//
// showMessage('Craig', 'Morris');

// function fn(number) {
  // if (number > 10) {
  //   return '–ß–∏—Å–ª–æ –±—ñ–ª—å—à–µ 10';
  // }
  //
  // return '–ß–∏—Å–ª–æ –º–µ–Ω—à–µ 10';
// }

// const result = fn(0); // '–ß–∏—Å–ª–æ –º–µ–Ω—à–µ 10'
//
// console.log(result);

/*
? –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é calcBMI(weight, height) —è–∫–∞ —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—î —ñ –ø–æ–≤–µ—Ä—Ç–∞—î —ñ–Ω–¥–µ–∫—Å –º–∞—Å–∏ —Ç—ñ–ª–∞ –ª—é–¥–∏–Ω–∏.
? –î–ª—è —Ü—å–æ–≥–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ —Ä–æ–∑–¥—ñ–ª–∏—Ç–∏ –≤–∞–≥—É –≤ –∫—ñ–ª–æ–≥—Ä–∞–º–∞—Ö –Ω–∞ –∫–≤–∞–¥—Ä–∞—Ç –≤–∏—Å–æ—Ç–∏ –ª—é–¥–∏–Ω–∏ –≤ –º–µ—Ç—Ä–∞—Ö.
? –í–∞–≥–∞ —ñ –≤–∏—Å–æ—Ç–∞ –±—É–¥—É—Ç—å —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω—ñ —è–∫ —Ä—è–¥–∫–∏. –ù–µ—Ü—ñ–ª—ñ —á–∏—Å–ª–∞ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –∑–∞–¥–∞–Ω—ñ —É –≤–∏–≥–ª—è–¥—ñ 24.7 –∞–±–æ 24,7,
? —Ç–æ–±—Ç–æ —è–∫ —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫ –¥—Ä–æ–±–æ–≤–æ—ó —á–∞—Å—Ç–∏–Ω–∏ –º–æ–∂–µ –±—É—Ç–∏ –∫–æ–º–∞.
? –Ü–Ω–¥–µ–∫—Å –º–∞—Å–∏ —Ç—ñ–ª–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –æ–∫—Ä—É–≥–ª–∏—Ç–∏ –¥–æ –æ–¥–Ω—ñ—î—ó —Ü–∏—Ñ—Ä–∏ –ø—ñ—Å–ª—è –∫–æ–º–∏;
*
 */

// function calcBMI(weight, height) {
//   weight = Number.parseFloat(weight.replace(',', '.'));
//   height = Number.parseFloat(height.replace(',', '.'));
//
//   const result = weight / (height ** 2);
//   return result.toFixed(1);
// }
//
// console.log(calcBMI('88,3', '1.75'));

/*
? –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é min(a, b), —è–∫–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –º–µ–Ω—à–µ –∑ —á–∏—Å–µ–ª a —ñ b.
*/

// const min = function(a, b) {
//   return a < b ? a : b;
// }
//
// console.log(min(1, 4));
// console.log(min(12, 4));

/*
? –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é getRectArea(dimensions) –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –ø–ª–æ—â—ñ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞ –∑—ñ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏,
? –∑–Ω–∞—á–µ–Ω–Ω—è —è–∫–∏—Ö –±—É–¥–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –¥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ dimensions —É –≤–∏–≥–ª—è–¥—ñ —Ä—è–¥–∫–∞.
? –ó–Ω–∞—á–µ–Ω–Ω—è –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –ø—Ä–æ–±—ñ–ª–æ–º.
*/

// function getRectArea(dimensions) {
//   const sideArr = dimensions.split(' ');
//   return Number(sideArr[0]) * Number(sideArr[1]);
// }
// console.log(4 * getRectArea('2 2'));
//
// console.log(getRectArea('2 4'));
// console.log(getRectArea('3 2'));
// console.log(getRectArea('2 '));

/*
? –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é logItems(items), —è–∫–∞ –æ—Ç—Ä–∏–º—É—î –º–∞—Å–∏–≤ —ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —Ü–∏–∫–ª for,
? —è–∫–∏–π –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É –±—É–¥–µ –≤–∏–≤–æ–¥–∏—Ç–∏ –¥–æ –∫–æ–Ω—Å–æ–ª—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
? —É —Ñ–æ—Ä–º–∞—Ç—ñ < –Ω–æ–º–µ—Ä –µ–ª–µ–º–µ–Ω—Ç–∞ > - < –∑–Ω–∞—á–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞ >. –ù—É–º–µ—Ä–∞—Ü—ñ—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –ø–æ–≤–∏–Ω–Ω–∞ –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ 1.
? –ù–∞–ø—Ä–∏–∫–ª–∞–¥, –¥–ª—è –ø–µ—Ä—à–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É ['Mango','Poly','Ajax'] –∑ —ñ–Ω–¥–µ–∫—Å–æ–º 0 –±—É–¥–µ –≤–∏–≤–µ–¥–µ–Ω–æ 1 - Mango,
? –∞ –¥–ª—è —ñ–Ω–¥–µ–∫—Å—É 2 –≤–∏–≤–µ–¥–µ 3 - Ajax.
*/

// const logItems = function(items = []) {
//   for (let i = 0; i < items.length; i++) {
//     console.log(`${i + 1} - ${items[i]}`);
//   }
// }
//
// logItems(['Mango', 'Poly', 'Ajax']);
// logItems(['üçé', 'üçá', 'üçë', 'üçå', 'üçã']);

/*
? –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é someFunction(arg1, arg2), —è–∫–∞ –≤–∏–≤–æ–¥–∏—Ç—å —É –∫–æ–Ω—Å–æ–ª—å —ñ–º'—è —ñ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏–π –Ω–æ–º–µ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
? –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ names —ñ phones –±—É–¥—É—Ç—å –ø–µ—Ä–µ–¥–∞–Ω—ñ —Ä—è–¥–∫–∞–º–∏, —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –∫–æ–º–∞–º–∏.
? –ü–æ—Ä—è–¥–∫–æ–≤–∏–π –Ω–æ–º–µ—Ä —ñ–º–µ–Ω —ñ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤ —É —Ä—è–¥–∫–∞—Ö –≤–∫–∞–∑—É—é—Ç—å –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å.
? –ö—ñ–ª—å–∫—ñ—Å—Ç—å —ñ–º–µ–Ω —ñ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤ –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ –æ–¥–Ω–∞–∫–æ–≤–∞.
*/

// function showPersonContacts(names, phoneNumbers) {
//   names = names.split(',');
//   phoneNumbers = phoneNumbers.split(',');
//
//   for (let i = 0; i < names.length; i++) {
//     console.log(`${names[i]}: ${phoneNumbers[i]}`);
//   }
// }
//
// const someValue = showPersonContacts(
//   'Jacob,William,Solomon,Artemis',
//   '89001234567,89001112233,890055566377,890055566300'
// );
// console.log(someValue);
//
// showPersonContacts('Vera,Carr,Violet,Sherman', '89001234567,89001112233,890055566377,890055566300');

/*
? –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é SomeFunction(arg1) —è–∫–∞ —à—É–∫–∞—î –Ω–∞–π–±—ñ–ª—å—à–µ —á–∏—Å–ª–æ –≤ –º–∞—Å–∏–≤—ñ.
*/

// const findLargestNumber = function(numberArray) {
//   let max = numberArray[0];
//
//   for (const num of numberArray) {
//     if (max < num) {
//       max = num;
//     }
//   }
//
//   return max;
// }

// console.log(findLargestNumber([2, 17, 94, 1, 23, 37])); // 94
// console.log(findLargestNumber([49, 4, 7, 83, 12])); // 83

/*
? –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é calcAverage() —è–∫–∞ –ø—Ä–∏–π–º–∞—î –¥–æ–≤—ñ–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ —ñ –ø–æ–≤–µ—Ä—Ç–∞—î —ó—Ö —Å–µ—Ä–µ–¥–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è.
? –í—Å—ñ –∞—Ä—É–≥–º–µ–Ω—Ç–∏ –±—É–¥—É—Ç—å —Ç—ñ–ª—å–∫–∏ —á–∏—Å–ª–∞–º–∏.
*/

function calcAverage() {
  let total = 0;

  for (let num of arguments) {
    total += num;
  }

  return total / arguments.length;
}

console.log(calcAverage(1, 2, 3, 4)); // 2.5
console.log(calcAverage(14, 8, 2)); // 8
console.log(calcAverage(27, 43, 2, 8, 36)); // 23.2

/*
? –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∫–æ–ª–µ–∫—Ü—ñ—î—é –Ω–∞–≤—á–∞–ª—å–Ω–∏—Ö –∫—É—Ä—Å—ñ–≤ courses:
? SomeFunction(arg1) - –¥–æ–¥–∞—î –∫—É—Ä—Å –≤ –∫—ñ–Ω–µ—Ü—å –∫–æ–ª–µ–∫—Ü—ñ—ó
? SomeFunction(arg1) - –≤–∏–¥–∞–ª—è—î –∫—É—Ä—Å –∑ –∫–æ–ª–µ–∫—Ü—ñ—ó
? SomeFunction(arg1, arg2) - –∑–º—ñ–Ω—é—î –Ω–∞–∑–≤—É –∫—É—Ä—Å–∞
*/

// const courses = ['HTML', 'CSS', 'JavaScript', 'React', 'PostgreSQL'];
//
// function addCourse(courseName) {
//   if (courses.includes(courseName)) {
//     console.log('–£ –≤–∞—Å –≤–∂–µ —î —Ç–∞–∫–∏–π –∫—É—Ä—Å');
//     return;
//   }
//
//   courses.push(courseName);
// }
//
// function removeCourse(courseName) {
//   if (!courses.includes(courseName)) {
//     console.log('–ö—É—Ä—Å –∑–∞ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
//     return;
//   }
//
//   const courseIndex = courses.indexOf(courseName);
//   courses.splice(courseIndex, 1);
// }
//
// function renameCourse(currentName, newName) {
//   if (!courses.includes(currentName)) {
//     console.log('–ö—É—Ä—Å –∑–∞ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
//     return;
//   }
//
//   const currentCourseIndex = courses.indexOf(currentName);
//   courses.splice(currentCourseIndex, 1, newName);
// }


// addCourse('Express');
// console.log(courses); // ['HTML', 'CSS', 'JavaScript', 'React', 'PostgreSQL', 'Express']
// addCourse('CSS'); // '–£ –≤–∞—Å –≤–∂–µ —î —Ç–∞–∫–∏–π –∫—É—Ä—Å'
//
// removeCourse('React');
// console.log(courses); // ['HTML', 'CSS', 'JavaScript', 'PostgreSQL', 'Express']
// removeCourse('Vue'); // '–ö—É—Ä—Å –∑–∞ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'

// renameCourse('PostgreSQL', 'NestJS');
// console.log(courses); // ['HTML', 'CSS', 'JavaScript', 'PostgreSQL', 'NestJS']
// renameCourse('–°++', 'PHP'); // '–ö—É—Ä—Å–∞ –∑–∞ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'



// const fn1 = function () {
//   console.log('fn1');
//
//   fn2();
//
//   console.log('final');
// };
//
// const fn2 = function () {
//   console.log('fn2');
//
//   fn3();
//
//   console.log('After fn2');
// };
//
// const fn3 = function () {
//   console.log('fn3');
// };
//
// fn1();

// const findLargestNumberFromString = function(value) {
//   const valueArr = value.split(', ');
//   return findLargestNumber(valueArr);
// }
//
// function findLargestNumber(numberArray) {
//   let maximum = numberArray[0];
//
//   for (const number of numberArray) {
//     if (maximum < number) {
//       maximum = number;
//     }
//   }
//
//   return maximum;
// }
// //                                             0  1   2   3  4
// console.log(findLargestNumberFromString([2, 17, 23, 5, 37]));
